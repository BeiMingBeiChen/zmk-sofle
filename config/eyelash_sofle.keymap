#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    TD0: TD0 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD0";
        #binding-cells = <0>;
        bindings = <&mt LEFT_GUI F>;
    };

    TD1: TD1 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD1";
        #binding-cells = <0>;
        bindings = <&mt LEFT_CONTROL D>;
    };

    TD2: TD2 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD2";
        #binding-cells = <0>;
        bindings = <&mt LEFT_SHIFT S>;
    };

    TD3: TD3 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD3";
        #binding-cells = <0>;
        bindings = <&mt LEFT_ALT A>;
    };

    TD4: TD4 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD4";
        #binding-cells = <0>;
        bindings = <&mt RIGHT_GUI J>;
    };

    TD5: TD5 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD5";
        #binding-cells = <0>;
        bindings = <&mt RIGHT_CONTROL K>;
    };

    TD6: TD6 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD6";
        #binding-cells = <0>;
        bindings = <&mt RIGHT_SHIFT L>;
    };

    TD7: TD7 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD7";
        #binding-cells = <0>;
        bindings = <&mt RIGHT_ALT COLON>;
    };

    Sticky_L: Sticky_L {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_L";
        bindings = <&lt>;
        #binding-cells = <1>;
        release-after-ms = <3000>;
    };

    Sticky_M: Sticky_M {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_M";
        bindings = <&mt>;
        #binding-cells = <1>;
        release-after-ms = <3000>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&mo 2               &none         &kp GRAVE         &kp CLCK                &none        &none               &kp UP_ARROW     &rgb_ug RGB_TOG  &none      &kp RA(SCROLLLOCK)       &kp PAUSE_BREAK  &kp UNDER      &mo 3
&kp TAB             &kp Q         &kp W             &kp E                   &kp R        &kp T               &kp DOWN_ARROW   &kp Y            &kp U      &kp I                    &kp O            &kp P          &kp DELETE
&kp ESCAPE          &TD3          &TD2              &TD1                    &TD0         &kp G               &kp LEFT_ARROW   &kp H            &TD4       &TD5                     &TD6             &TD7           &kp BACKSPACE
&Sticky_M LEFT_ALT  &kp Z         &kp X             &kp C                   &kp V        &kp B               &kp RIGHT_ARROW  &kp N            &kp M      &kp COMMA                &kp DOT          &kp FSLH       &Sticky_M RIGHT_ALT
&kp C_MUTE          &kp LEFT_GUI  &kp LEFT_CONTROL  &mt LEFT_SHIFT LS(TAB)  &lt 1 SPACE  &mt LEFT_GUI TAB    &kp ENTER        &Sticky_L 1      &lt 1 RET  &mt RIGHT_SHIFT RS(RET)  &kp RIGHT_SHIFT  &kp RIGHT_GUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp GRAVE   &kp F1           &kp F2          &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7           &kp F8      &kp F9     &kp F10           &trans
&trans      &kp GRAVE        &mkp LCLK       &mkp MCLK        &mkp RCLK        &mkp MB4           &mmv MOVE_DOWN   &kp PG_UP        &kp END          &kp UP      &kp HOME   &kp MINUS         &kp EQUAL
&trans      &kp TILDE        &trans          &trans           &trans           &mkp MB5           &mmv MOVE_LEFT   &kp PG_DN        &kp LEFT         &kp DOWN    &kp RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans      &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT  &kp F11    &kp F12           &trans
&kp C_MUTE  &trans           &trans          &trans           &trans           &trans             &mkp LCLK        &trans           &trans           &trans      &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp F6  &kp F7  &kp F8      &kp F9     &kp F10      &trans
&trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans  &kp F11     &kp F12    &kp UNDER    &kp PLUS
&trans     &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans  &trans  &trans      &trans     &kp LBRC     &kp RBRC
&trans     &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans  &trans  &sys_reset  &soft_off  &bootloader  &trans
&trans     &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans  &trans  &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
